@using LSP.Models
@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvList" + Model.PART_ID;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.KeyFieldName = "ID";
    settings.SettingsPager.PageSize = LSP.Models.Common.PageSize(); //10
    settings.SettingsPager.NumericButtonCount = 10;
    settings.SettingsPager.AllButton.Visible = true;
    settings.SettingsPager.AlwaysShowPager = true;

    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = Common.PageSizeItemSettings(); //new string[] { "10", "20", "50" };
    
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.CallbackRouteValues = new { Controller = "TB_R_PART_STOCK", Action = "PART_IN_OUT_GridCallback", PART_ID = Model.PART_ID };

    settings.Styles.Header.Font.Bold = true;
    settings.Styles.Header.Font.Size = 7;
    settings.Styles.Header.ForeColor = System.Drawing.Color.White;
    settings.Styles.Header.Paddings.Padding = 3;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    settings.Styles.Header.BackColor = System.Drawing.Color.Black;
    settings.Styles.Cell.Font.Size = 8;
    settings.SettingsBehavior.AllowFocusedRow = true;

    //Export
    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
    settings.SettingsExport.FileName = "PART_IN_OUT";
    settings.SettingsExport.BeforeExport = (sender, e) =>
     {
         MVCxGridView gridView = sender as MVCxGridView;
         if (sender == null)
             return;
         gridView.Columns["Op."].Visible = false;
     };

    //Toolbar
    settings.Toolbars.Add(toolbar =>
    {
        toolbar.Enabled = true;
        toolbar.Position = GridToolbarPosition.Top;
        toolbar.ItemAlign = GridToolbarItemAlign.Left;
        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                Html.DevExpress().ButtonEdit(s =>
                {
                    s.Name = "searchInlineIO";
                    s.Properties.NullText = "Search inline...";
                    s.Properties.Buttons
                        .Add()
                        .Image.IconID = DevExpress.Web.ASPxThemes.IconID.FindFind16x16gray;
                }).Render();
            });
        });
        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                @Html.DevExpress().Button(s =>
                {
                    s.Name = "btnExportXls2";
                    s.ClientSideEvents.Click = "function(s, e) {" + "gvList" + Model.PART_ID + ".ExportTo(ASPxClientGridViewExportFormat.Xls);}";
                    s.Text = "Export to Xls";
                    s.Images.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ExportExporttoxls16x16;
                }).GetHtml();
            });
        });       
    });

    //For Search panel
    settings.SettingsSearchPanel.CustomEditorName = "searchInlineIO";
    
    settings.Columns.Add(c =>
    {
        c.Caption = "Op.";
        c.Width = System.Web.UI.WebControls.Unit.Pixel(70);
        c.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        c.SetDataItemTemplateContent(
            content =>
            {
                System.Text.StringBuilder strBuilder = new System.Text.StringBuilder();
                if (Html.Toyota().Authorization.IsAuthorizedToAccessFeature
                   (Html.Toyota().Page.ControllerName.ToString(), "Edit"))
                {
                    strBuilder.Append(string.Concat("<a class='btnCollectionEdit' href='#edit' data-id='", DataBinder.Eval(content.DataItem, "ID"), "' onclick='return PART_IN_OUTEdit(this)' title='Edit'><i class='fa fa-pencil'></i></a>"));
                }
                if (Html.Toyota().Authorization.IsAuthorizedToAccessFeature
                   (Html.Toyota().Page.ControllerName.ToString(), "Delete"))
                {
                    strBuilder.Append(string.Concat(" <a class='btnCollectionDelete' href='#delete' data-id='", DataBinder.Eval(content.DataItem, "ID"), "' onclick='return PART_IN_OUTDelete(this)'  title='Delete'><i class='fa fa-trash-o'></i></a>"));
                }
                Html.ViewContext.Writer.Write(strBuilder.ToString());
            });
    });

    settings.Columns.Add(c =>
        {
            c.Caption = "No.";
            c.FieldName = "Row_No";
            c.Width = 60;
        }
    );
    
    settings.Columns.Add(c =>
        {
            c.Caption = "IN/OUT";
            c.FieldName = "IS_IN_OUT";
        }
    );
    
    settings.Columns.Add(c =>
        {
            c.Caption = "IN/OUT DATE";
            c.FieldName = "CREATED_DATE";
            c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy HH:mm:ss";
        }
    );
    
    settings.Columns.Add(c =>
        {
            c.Caption = "QTY";
            c.FieldName = "QTY";
            c.Width = 60;
        }
    );
    settings.Columns.Add(c =>
        {
            c.Caption = "IN/OUT BY";
            c.FieldName = "IN_OUT_BY";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 80;
        }
    );
    settings.Columns.Add(c =>
        {
            c.Caption = "IN ORDER NO";
            c.FieldName = "IN_ORDER_NO";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 180;
        }
    );
    settings.Columns.Add(c =>
        {
            c.Caption = "OUT FOR PROD. SFX";
            c.FieldName = "OUT_PROD_VEHICLE";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 200;
        }
    );
    settings.Columns.Add(c =>
        {
            c.Caption = "IS PROCESS STOCK?";
            c.FieldName = "IS_PROCESS_STOCK";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 70;
        }
    );
    settings.Columns.Add(c =>
        {
            c.Caption = "IS ACTIVE?";
            c.FieldName = "IS_ACTIVE";
        }
    );

}).Bind(LSP.Models.TB_R_PART_IN_OUT.TB_R_PART_IN_OUTProvider.Instance.TB_R_PART_IN_OUT_GetsByPartID(Model ?? new LSP.Models.TB_R_PART_IN_OUT.TB_R_PART_IN_OUTInfo())).GetHtml()
