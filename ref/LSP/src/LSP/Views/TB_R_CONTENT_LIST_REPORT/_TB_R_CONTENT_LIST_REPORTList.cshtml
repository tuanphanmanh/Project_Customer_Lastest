@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gvContentListReport";
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.KeyFieldName = "ID";
    settings.SettingsPager.PageSize = LSP.Models.Common.PageSize_M();
    settings.SettingsPager.NumericButtonCount = 10;
    settings.SettingsPager.AllButton.Visible = true;
    settings.SettingsPager.AlwaysShowPager = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = LSP.Models.Common.PageSizeItemSettings();//new string[] { "10", "20", "50" };
    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;

    settings.CallbackRouteValues = new { Controller = "TB_R_CONTENT_LIST_REPORT", Action = "GridCallback"};

    settings.Settings.HorizontalScrollBarMode = DevExpress.Web.ScrollBarMode.Auto;
    settings.Styles.Header.Font.Bold = true;
    settings.Styles.Header.Font.Size = 7;
    settings.Styles.Header.ForeColor = System.Drawing.Color.White;
    settings.Styles.Header.Paddings.Padding = 3;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.Styles.Header.BackColor = System.Drawing.Color.Black;
    settings.Styles.Cell.Font.Size = 8;

    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
    settings.SettingsResizing.Visualization = ResizingMode.Live;
    settings.SettingsBehavior.AllowEllipsisInText = true;
    //Export
    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
    settings.SettingsExport.BeforeExport = (sender, e) =>
    {
        MVCxGridView gridView = sender as MVCxGridView;
        if (sender == null)
            return;
        gridView.Columns["Op."].Visible = false;
        gridView.Columns["Reflect & Stop alarm"].Visible = false;
    };

    //Toolbar
    settings.Toolbars.Add(toolbar =>
    {
        toolbar.Enabled = true;
        toolbar.EnableAdaptivity = true;
        toolbar.Position = GridToolbarPosition.Top;
        toolbar.ItemAlign = GridToolbarItemAlign.Left;

        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                Html.DevExpress().ButtonEdit(s =>
                {
                    s.Name = "searchContent";
                    s.Properties.NullText = "Search inline...";
                    s.Properties.Buttons
                        .Add()
                        .Image.IconID = DevExpress.Web.ASPxThemes.IconID.FindFind16x16gray;
                }).Render();
            });
        });

        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                @Html.DevExpress().Button(s =>
                {
                    s.Name = "btnContentExportXls";
                    s.ClientSideEvents.Click = "function(s, e) {gvContentListReport.ExportTo(ASPxClientGridViewExportFormat.Xls);}";
                    s.Text = "Export to Xls";
                    s.Images.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ExportExporttoxlsx16x16office2013;
                }).GetHtml();
            });
        });

        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                @Html.DevExpress().Button(s =>
                {
                    s.Name = "btnContentExportXls_V2";
                    s.ClientSideEvents.Click = "function(s, e) {EXPORT_CONTENT_REPORT();}";
                    s.Text = "Export to Xls (V2)";
                    s.Images.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ExportExporttoxlsx16x16office2013;
                }).GetHtml();
            });
        });    
          
    });
    //For Search panel
    settings.SettingsSearchPanel.CustomEditorName = "search";
    settings.Styles.FocusedRow.BackColor = System.Drawing.Color.LightGray;
    settings.Styles.Row.ForeColor = System.Drawing.Color.Black;
    
    settings.Columns.Add(c =>
    {
        c.Caption = "Op.";
        c.Width = System.Web.UI.WebControls.Unit.Pixel(60);
        c.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        c.SetDataItemTemplateContent(
            content =>
            {
                System.Text.StringBuilder strBuilder = new System.Text.StringBuilder();
                if (Html.Toyota().Authorization.IsAuthorizedToAccessFeature
                   (Html.Toyota().Page.ControllerName.ToString(), "Edit"))
                {
                    strBuilder.Append(string.Concat("<a class='btnCollectionEdit' href='#edit' data-id='", DataBinder.Eval(content.DataItem, "ID"), "' onclick='return Edit(this)' title='Edit'><i class='fa fa-pencil'></i></a>"));
                }
                if (Html.Toyota().Authorization.IsAuthorizedToAccessFeature
                   (Html.Toyota().Page.ControllerName.ToString(), "Delete"))
                {
                    strBuilder.Append(string.Concat(" <a class='btnCollectionDelete' href='#delete' data-id='", DataBinder.Eval(content.DataItem, "ID"), "' onclick='return Delete(this)'  title='Delete'><i class='fa fa-trash-o'></i></a>"));
                }
                Html.ViewContext.Writer.Write(strBuilder.ToString());
            });
        c.FixedStyle = GridViewColumnFixedStyle.Left;
    });

    settings.Columns.Add(c =>
        {
            c.Caption = "No.";
            c.FieldName = "ROW_NO";
            c.Width = 50;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        }
    );
    
    settings.Columns.Add(c =>
        {
            c.Caption = "WORKING DATE";
            c.FieldName = "WORKING_DATE";
            c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
            c.Width = 80;
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        }
    );
   
    settings.Columns.Add(c =>
        {
            c.Caption = "SHIFT";
            c.FieldName = "SHIFT";
            c.Width = 60;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        }
    );
     
    settings.Columns.Add(c =>
    {
        c.Caption = "SUPPLIER";
        c.FieldName = "SUPPLIER_CODE";
        c.Width = 70;
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.FixedStyle = GridViewColumnFixedStyle.Left;        
    }
    );        
    
    settings.Columns.Add(c =>
    {
        c.Caption = "ORDER NO";
        c.FieldName = "ORDER_NO";
        c.Width = 120;
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.FixedStyle = GridViewColumnFixedStyle.Left;
    }
    );    
    settings.Columns.Add(c =>
        {
            c.Caption = "CONTENT NO";
            c.FieldName = "CONTENT_NO";
            c.Width = 150;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        }
    );

    settings.Columns.Add(c =>
    {
        c.Caption = "MODULE NO";
        c.FieldName = "MODULE_NO";
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.Width = 65;
    });
    
    settings.Columns.Add(c =>
    {
        c.Caption = "EST ARRIVAL DATE";
        c.FieldName = "EST_ARRIVAL_DATETIME";
        c.PropertiesEdit.DisplayFormatString = "dd/MM/yy HH:mm";
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.Width = 90; 
    });     
    
    settings.Columns.AddBand(cBand =>
    {
        cBand.Caption = "RECEIVING";
        cBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        cBand.HeaderStyle.BackColor = System.Drawing.Color.Peru;

        cBand.Columns.Add(c =>
        {
            c.Caption = "RECEIVING ACTUAL DATE";
            c.FieldName = "RECEIVING_ACT_DATETIME";
            c.PropertiesEdit.DisplayFormatString = "dd/MM/yy HH:mm";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 90;     
        });

        cBand.Columns.Add(c =>
        {
            c.Caption = "PLAN PALLET QTY";
            c.FieldName = "PLAN_PALLET_QTY";
            c.Width = 60;
            c.HeaderStyle.Wrap = DefaultBoolean.True;
        }
        );

        cBand.Columns.Add(c =>
        {
            c.Caption = "ACTUAL PALLET QTY";
            c.FieldName = "ACTUAL_PALLET_QTY";
            c.Width = 60;
            c.HeaderStyle.Wrap = DefaultBoolean.True;
        }
        );

        cBand.Columns.Add(c =>
        {
            c.Caption = "GAP QTY";
            c.FieldName = "PLAN_PALLET_GAP_QTY";        
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 50;
        });

        cBand.Columns.Add(c =>
        {
            c.Caption = "RECEIVING ISSUE";
            c.FieldName = "RECEIVING_ISSUE";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
        });
    });

    settings.FormatConditions.AddHighlight("PLAN_PALLET_GAP_QTY", "[PLAN_PALLET_GAP_QTY] = 0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    settings.FormatConditions.AddHighlight("PLAN_PALLET_GAP_QTY", "[PLAN_PALLET_GAP_QTY] <> 0", GridConditionHighlightFormat.YellowFillWithDarkYellowText);
    
    settings.Columns.Add(c =>
    {
        c.Caption = "Reflect & Stop alarm";
        c.Width = System.Web.UI.WebControls.Unit.Pixel(60);
        c.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.HeaderStyle.BackColor = System.Drawing.Color.OrangeRed;
        c.SetDataItemTemplateContent(
            content =>
            {
                System.Text.StringBuilder strBuilder = new System.Text.StringBuilder();
                if (Html.Toyota().Authorization.IsAuthorizedToAccessFeature(Html.Toyota().Page.ControllerName.ToString(), "Edit")
                    && (Convert.ToString(DataBinder.Eval(content.DataItem, "RECEIVING_STATUS")) == "O" ||
                        Convert.ToString(DataBinder.Eval(content.DataItem, "RECEIVING_STATUS")) == "S"))
                {
                    strBuilder.Append(string.Concat("<a class='btnCollectionEdit' href='#edit' data-id='", 
                                                    DataBinder.Eval(content.DataItem, "ID"),
                                                    "' data-type='",
                                                     DataBinder.Eval(content.DataItem, "RECEIVING_STATUS"), 
                                                    "' onclick='return ReflectAlarm(this)' title='Edit'><i class='fa fa-arrow-right'></i></a>"));
                }
                Html.ViewContext.Writer.Write(strBuilder.ToString());
            });
    });
    
    settings.Columns.AddBand(cBand =>
    {
        cBand.Caption = "LOG";
        cBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        cBand.HeaderStyle.BackColor = System.Drawing.Color.LightSeaGreen;

        cBand.Columns.Add(c =>
        {
            c.Caption = "PIC RECORDER";
            c.FieldName = "RECEIVING_PIC";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 80;
        });
                
        cBand.Columns.Add(c =>
        {
            c.Caption = "ALARM";
            c.FieldName = "RECEIVING_ALARM";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
        });
    });
   settings.Columns.AddBand(cBand =>
    {
        cBand.Caption = "PC";
        cBand.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        cBand.HeaderStyle.BackColor = System.Drawing.Color.YellowGreen;

        cBand.Columns.Add(c =>
        {
            c.Caption = "CAUSE";
            c.FieldName = "RECEIVING_CAUSE";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
        }
        );

        cBand.Columns.Add(c =>
        {
            c.Caption = "COUTERMEASURE";
            c.FieldName = "RECEIVING_COUTERMEASURE";
            c.HeaderStyle.Wrap = DefaultBoolean.True;
            c.Width = 110;
        });

        cBand.Columns.Add(c =>
            {
                c.Caption = "PIC ACTION";
                c.FieldName = "RECEIVING_PIC_ACTION";
                c.HeaderStyle.Wrap = DefaultBoolean.True;
                c.Width = 70;
            }
        );

        cBand.Columns.Add(c =>
            {
                c.Caption = "RESULT";
                c.FieldName = "RECEIVING_PIC_RESULT";
                c.HeaderStyle.Wrap = DefaultBoolean.True;
                c.Width = 70;
            }
        );
    });
                      
    settings.Columns.Add(c =>
    {
        c.Caption = "IS ACTIVE?";
        c.FieldName = "IS_ACTIVE";
        c.SetDataItemTemplateContent(cc =>
        {
            Html.DevExpress().CheckBox(checkboxSettings =>
            {
                checkboxSettings.Name = "_IS_ACTIVE" + Convert.ToString(DataBinder.Eval(cc.DataItem, "ID"));
                checkboxSettings.Checked = Convert.ToString(DataBinder.Eval(cc.DataItem, "IS_ACTIVE")) == "Y" ? true : false;
                checkboxSettings.Properties.ClientSideEvents.CheckedChanged = "function() { return false; }";                
            }).Render();
        });
        c.Width = 60;
        c.HeaderStyle.Wrap = DefaultBoolean.True;
    });
                        
    settings.Columns.Add(c =>
    {
        c.Caption = "UPDATED BY";
        c.FieldName = "UPDATED_BY";
        c.HeaderStyle.Wrap = DefaultBoolean.True;
        c.Width = 70;
    }
 );   
}).Bind(LSP.Models.TB_R_CONTENT_LIST_REPORT.TB_R_CONTENT_LIST_REPORTProvider.Instance.TB_R_CONTENT_LIST_REPORT_Search(Model ?? new LSP.Models.TB_R_CONTENT_LIST.TB_R_CONTENT_LISTInfo())).GetHtml()

